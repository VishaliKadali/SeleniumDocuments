The Maven lifecycle is a series of phases that define the order in which the goals (tasks) are executed. Maven has three built-in lifecycles: default, clean, and site. Each of these lifecycles consists of a sequence of phases, and each phase may execute one or more goals.

1. Default Lifecycle
The default lifecycle handles project deployment. It is the main lifecycle and consists of the following key phases:

validate: Checks if the project is correct and all necessary information is available.
compile: Compiles the source code of the project.
test: Runs the tests using a suitable unit testing framework (e.g., JUnit).
package: Packages the compiled code into a distributable format like JAR or WAR.
verify: Runs checks on results of integration tests to ensure quality criteria are met.
install: Installs the package into the local repository, making it available for other projects on the same machine.
deploy: Copies the final package to the remote repository for sharing with other developers.
2. Clean Lifecycle
The clean lifecycle handles project cleaning. It consists of the following phases:

pre-clean: Executes processes needed before the actual project cleaning.
clean: Removes all files generated by the previous build.
post-clean: Executes processes needed after the project cleaning.
3. Site Lifecycle
The site lifecycle is responsible for creating the project's site documentation. It consists of the following phases:

pre-site: Executes processes needed before the actual site generation.
site: Generates the project's site documentation.
post-site: Executes processes needed after the site generation, and prepares for site deployment.
site-deploy: Deploys the generated site documentation to the specified server.


Example Commands
To run the default lifecycle up to the package phase:
bash

mvn package
To clean the project and build it:

mvn clean install
To generate the site documentation:

mvn site
These commands trigger the respective lifecycle and execute all phases leading up to the specified one.